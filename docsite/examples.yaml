- title: Subjects
  doc_filename: examples_subjects
  schema: examples-schema-subjects.sql
  examples:
  - title: All departments
    ref: example_subjects_all_departments
    description: A table entry with just a table name will fetch all rows.
    short_description: A table entry with just a table name will fetch all rows for that table
    config:
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
      - INSERT INTO departments (id, name) VALUES(1, 'Research');
      - INSERT INTO departments (id, name) VALUES(2, 'Accounting');
      - INSERT INTO departments (id, name) VALUES(3, 'Finance');

  - title: One department
    ref: example_subjects_one_department
    description: A table entry with a single column/value will fetch one row.
    short_description: A table entry with a single column/value will fetch one row
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: Research}
    expected_statements:
      - INSERT INTO departments (id, name) VALUES(1, 'Research');

  - title: Two departments
    ref: example_subjects_two_departments
    description: A table entry with multiple column/values will fetch multiple rows.
    short_description: A table entry with multiple column/values will fetch multiple rows
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: ['Research', 'Accounting']}
    expected_statements:
      - INSERT INTO departments (id, name) VALUES(1, 'Research');
      - INSERT INTO departments (id, name) VALUES(2, 'Accounting');

  - title: Two tables
    ref: example_subjects_two_tables
    description: A subject can have multiple tables.
    short_description: A table entry with multiple column/values will fetch multiple rows
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: Accounting}
          - {table: departments, column: name, values: Research}
    expected_statements:
      - INSERT INTO departments (id, name) VALUES(1, 'Research');
      - INSERT INTO departments (id, name) VALUES(2, 'Accounting');

  - title: Two subjects
    ref: example_subjects_two_subjects
    description: |
      Subjects can have different tables and relations.
      This example is a bit silly since both departments can be done in the same subject,
      it just illustrates that things can be broken down.
    short_description: Two subjects with one table each
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: Accounting}
      - subject:
        - tables:
          - {table: departments, column: name, values: Research}
    expected_statements:
      - INSERT INTO departments (id, name) VALUES(1, 'Research');
      - INSERT INTO departments (id, name) VALUES(2, 'Accounting');

# ------------------------------------------------------------------------------------------------------------------------
- title: Defaults
  doc_filename: examples_defaults
  schema: examples-schema-defaults.sql
  examples:
  - title: all-outgoing-not-null
    ref: example_relations_all_outgoing_not_null
    description: |
      ``all-outgoing-not-null`` is the minimum required relation.
      Nullable outgoing foreign keys are ignored, as well as incoming foreign keys.
      Fetching all ``departments`` will make the ``building_id`` foreign key ``null``.
      Also, since no incoming relations are in the defaults, no rows in ``employees`` are fetched.
      If rows in ``buildings`` are required, they can be enabled by adding an ``outgoing`` relation from ``departments`` to ``buildings``. This will also make the ``null`` go away in the research department. See :ref:`outgoing_relation`.
    short_description: all-outgoing-not-null
    config:
      - relations:
          - {defaults: all-outgoing-not-null}
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', NULL);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);

  - title: all-outgoing-nullable
    ref: example_relations_all_outgoing_nullable
    description: |
      ``all-outgoing-nullable`` ensures that all foreign keys are processed.
      In this example it means that the ``buildings`` row with id=1 must be fetched to satisfy the ``building_id`` foreign key constraint on the ``departments`` table.
      Also, since no incoming relations are in the defaults, no rows in ``employees`` are fetched.
    short_description: all-outgoing-nullable
    config:
      - relations:
          - {defaults: all-outgoing-nullable}
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);

  - title: all-incoming
    ref: example_relations_all_incoming
    description: |
      ``all-incoming`` ensures that for any row that is fetched all *referencing* foreign keys are processed in other tables.
      In this example it means that that all ``employees`` with ``department_id`` in the fetched departments are fetched.
      Note how no rows in ``buildings`` are fetched, since ``all-outgoing-nullable`` wasn't enabled.
    short_description: all-incoming
    config:
      - relations:
          - {defaults: all-incoming}
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
     - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', NULL);
     - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
     - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
     - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
     - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

  - title: all-incoming and all-outgoing-nullable
    ref: example_relations_all_incoming_and_all_outgoing_nullable
    description: |
      The combination of ``all-outgoing-nullable`` and ``all-incoming``, which is equivalent to :ref:`example_relations_everything`, fetches everything in ``buildings`` and ``employees`` related to all the ``departments``.
    short_description: all-incoming and all-outgoing-nullable
    config:
      - relations:
          - {defaults: all-outgoing-nullable}
          - {defaults: all-incoming}
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

  - title: everything
    ref: example_relations_everything
    description: |
      This is equivalent to the above :ref:`example_relations_all_incoming_and_all_outgoing_nullable`
    short_description: everything
    config:
      - relations:
          - {defaults: everything}
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

# ------------------------------------------------------------------------------------------------------------------------
- title: Relations
  doc_filename: examples_relations
  schema: examples-schema-defaults.sql
  examples:
  - title: Default relations for a department
    ref: example_default_relations_for_a_department
    description: |
      By default, whenever a row is seen, everything is done to ensure the row is complete.
      Since the ``departments`` table contains a foreign key on ``building_id``, all buildings referenced from departments will be also fetched.
      However rows referencing the department aren't fetched.
    short_description: Default relations for a department
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: Research}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);

  - title: Incoming Relation
    ref: incoming_relation1
    description: |
      This does an extraction with a relation from ``employees`` to ``departments``. This will include both employees in the research department.
      Note how rows in ``buildings`` are also included since by the default all outgoing foreign keys are fetched. See :ref:`defaults` for more details.
      The ``type`` of ``incoming`` doesn't have to be included in the config since this is the default.
    short_description: Incoming Relation
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: Research}
        - relations:
          - {table: employees, column: department_id}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);

  - title: Relation for two departments 1
    ref: example_relations_two_departments1
    description: |
      This does an extraction with the above relation, but with both departments.
      This ends up fetching all employees.
    short_description: Default relations for two departments
    config:
    - subject:
      - tables:
        - {table: departments, column: name, values: [Research, Accounting]}
      - relations:
        - {table: employees, column: department_id}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

  - title: Relation for two departments 2
    ref: example_relations_two_departments2
    description: This is equivalent to :ref:`example_relations_two_departments1`, except it used two separate table sections.
    short_description: Alternative default relations for two departments
    config:
    - relations:
      - {table: employees, column: department_id}
    - subject:
      - tables:
        - {table: departments, column: id, values: 1}
        - {table: departments, column: id, values: 2}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

  - title: Relation for two departments 3
    ref: example_relations_two_departments3
    description: This is equivalent to :ref:`example_relations_two_departments1`, except it used two separate subjects.
    short_description: Another alternative default relations for two departments
    config:
    - relations:
      - {table: employees, column: department_id}
    - subject:
      - tables:
        - {table: departments, column: id, values: 1}
    - subject:
      - tables:
        - {table: departments, column: name, values: Accounting}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

  - title: Relation for an employee
    ref: example_relations_an_employee
    description: |
      A subject to fetch the John employee with the ``everything`` default leads to all employees in the research department being fetched since:

      - John belongs to the research department
      - All employees in the research department are fetched, which pulls in Jane
    short_description: All relations
    config:
      - relations:
          - { defaults: everything}
      - subject:
        - tables:
          - {table: employees, column: name, values: John}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
      - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);

  - title: Outgoing relation
    ref: outgoing_relation
    description: |
      This shows the explicit enabling of an outgoing nullable relation when using the minimal defaults of ``all-outgoing-not-null``.
      Without the relation, no rows in the ``buildings`` table would be fetched, since the default rules don't including following nullable foreign keys as described on :ref:`example_relations_all_outgoing_not_null`.
      In this example, the relation is enabled, resulting in building being included.
    short_description: Outgoing relation
    config:
      - relations:
          - {defaults: all-outgoing-not-null}
      - subject:
        - tables:
          - {table: departments, column: name, values: ['Research', 'Accounting']}
        - relations:
          - {table: departments, column: building_id, type: outgoing}
    expected_statements:
     - INSERT INTO buildings (id, name) VALUES(1, 'London');
     - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
     - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);

  - title: Disabled incoming relation
    ref: example_relations_disabled_incoming
    description: |
      This demonstrates the blacklisting approach. All relations are enabled by default,
      however the relation from ``employees`` to ``departments`` is disabled.
      Fetching a department will therefore not fetch any of the employees.

      This is an ``incoming`` relationship type from the perspective of the ``employees`` table.
      The ``type`` key doesn't have to be included since the default type is ``incoming``.
      Relations can be disabled globally or per subject.
    short_description: Blacklisting approach with a disabled incoming relation
    config:
      - relations:
          - { defaults: everything}
      - subject:
        - tables:
          - {table: departments, column: name, values: ['Research', 'Accounting']}
        - relations:
          - {table: employees, column: department_id, disabled: true}
    expected_statements:
      - INSERT INTO buildings (id, name) VALUES(1, 'London');
      - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', 1);
      - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);


  - title: Disabled outgoing relation
    ref: example_relations_disabled_outgoing
    description: |
      This is another example of the blacklisting approach. All relations are enabled by default,
      however the relation from ``departments`` to ``buildings`` is disabled.
      Fetching a department will therefore not fetch any of the buildings.
      This is an ``outgoing`` relationship type from the perspective of the ``departments`` table due to the ``building_id`` foreign key.
      A side effect of disabling this relation is that ``building_id`` becomes ``null`` for the "Research" department, even though the "Research" department is associated with the "London" building.
    short_description: Blacklisting approach with a disabled outgoing relation
    config:
      - relations:
          - { defaults: everything}
      - subject:
        - tables:
          - {table: departments, column: name, values: ['Research', 'Accounting']}
        - relations:
          - {table: departments, column: building_id, disabled: true, type: outgoing}
    expected_statements:
     - INSERT INTO departments (id, name, building_id) VALUES(1, 'Research', NULL);
     - INSERT INTO departments (id, name, building_id) VALUES(2, 'Accounting', NULL);
     - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
     - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 1);
     - INSERT INTO employees (id, name, department_id) VALUES(3, 'Janet', 2);

# ------------------------------------------------------------------------------------------------------------------------
- title: Compound Foreign Keys
  doc_filename: examples_compound_foreign_keys
  schema: examples-schema-compound-foreign-keys.sql
  make_table: false
  examples:
  - title: Compound Foreign Keys
    ref: examples_compound_foreign_keys
    description: This extremely convoluted example shows that compound key support is built in. Relations can also be used, but only one column is matched in the foreign key.
    short_description: Compound Foreign Keys
    config:
      - relations:
          - {defaults: everything}
      - subject:
        - tables:
          - {table: departments}
    expected_statements:
     - INSERT INTO buildings (id1, id2, name) VALUES(1, 1, 'London');
     - INSERT INTO departments (id1, id2, name, building1_id, building2_id) VALUES(1, 1, 'Research', 1, 1);
     - INSERT INTO departments (id1, id2, name, building1_id, building2_id) VALUES(2, 2, 'Accounting', NULL, NULL);
     - INSERT INTO employees (id1, id2, name, department1_id, department2_id) VALUES(1, 1, 'John', 1, 1);
     - INSERT INTO employees (id1, id2, name, department1_id, department2_id) VALUES(2, 2, 'Jane', 1, 1);
     - INSERT INTO employees (id1, id2, name, department1_id, department2_id) VALUES(3, 3, 'Janet', 2, 2);

# ------------------------------------------------------------------------------------------------------------------------
- title: Sticky Relations
  doc_filename: examples_sticky_relations
  schema: examples-schema-sticky-relations.sql
  make_table: false
  examples:
  - title: Sticky Relations
    ref: examples_sticky_relations
    description: |
      Let's say we want to have a database with all engineers in the engineering department and include all engineer's addresses.
      We want to specifically *not* include manager's addresses. If we were to simply add relations from ``employees`` to ``departments`` and ``addresses`` to ``employees``, then any employee's boss would trigger a fetch from the management department, which would lead to all employee's managers being fetched, which would lead to all manager's addresses being fetched.

      By making relations `sticky`, they are only processed if there is a sticky trail all the way back to a subject.
      If we set the sticky flag on the ``department_id`` and ``employee_id`` foreign keys, then these relationships are `only` processed if there is a direct trail back to a subject.
      When the ``boss_id`` foreign key is processed, the sticky flag is dropped.
      Therefore, when the "John" employee is processed, the sticky flag has been lost and the sticky relationships aren't used, resulting in no addresses being fetched for John.
      This can be seen in the explain output in the lines where the employee to boss relationship is processed: the asterisks, indicating stickiness, disappear.
    short_description: Sticky Relations
    config:
      - subject:
        - tables:
          - {table: departments, column: name, values: Engineers}
        - relations:
          - {table: employees, column: department_id, sticky: true}
          - {table: addresses, column: employee_id, sticky: true}
    expected_statements:
     - INSERT INTO departments (id, name) VALUES(1, 'Managers');
     - INSERT INTO departments (id, name) VALUES(2, 'Engineers');
     - INSERT INTO employees (id, name, department_id, boss_id) VALUES(1, 'John', 1, NULL);
     - INSERT INTO employees (id, name, department_id, boss_id) VALUES(2, 'Jane', 2, NULL);
     - INSERT INTO employees (id, name, department_id, boss_id) VALUES(3, 'Janet', 2, NULL);
     - INSERT INTO addresses (id, employee_id, details) VALUES(2, 2, 'Jane''s adddress');
     - INSERT INTO addresses (id, employee_id, details) VALUES(3, 3, 'Janet''s first address');
     - INSERT INTO addresses (id, employee_id, details) VALUES(4, 3, 'Janet''s second address');
     - UPDATE employees SET boss_id=1 WHERE id=2;
     - UPDATE employees SET boss_id=2 WHERE id=3;

# ------------------------------------------------------------------------------------------------------------------------
- title: Not Null Columns
  doc_filename: examples_not_null_columns
  schema: examples-schema-not-null-columns.sql
  examples:
  - title: Not Null Columns
    ref: examples_not_null_columns1
    description: |
      In this example, two tables, ``departments`` and ``employees`` both reference each other with nullable foreign keys.
      It makes no difference to the SQL generation which table comes first when generating the  ``INSERT`` statements, so they are processed in alphabetical order with the ``departments`` table getting insert statements generated first.
      The value for ``primary_employee_id`` can't be added until the rows have been inserted in to the ``employees`` table
      so an ``UPDATE`` statement for ``departments`` is needed after the ``employees`` rows have been inserted.
    short_description: Not Null Columns
    config:
      - subject:
        - tables:
          - {table: departments}
        - relations:
          - {table: employees, column: department_id}
    expected_statements:
     - INSERT INTO departments (id, name, primary_employee_id) VALUES(1, 'Managers', NULL);
     - INSERT INTO departments (id, name, primary_employee_id) VALUES(2, 'Engineers', NULL);
     - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', 1);
     - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', 2);
     - UPDATE departments SET primary_employee_id=1 WHERE id=1;

  - title: Not Null Columns Switched
    ref: examples_not_null_columns2
    description: |
      Let's pretend there is some reason why a row can't be inserted into ``departments`` without ``primary_employee_id`` being set due to a ``CHECK`` constraint.
      The SQL generation engine can be given a hint by using a ``not-null-columns`` rule. This results in the tables being processed in reverse order with ``employees`` getting inserts first, then ``departments``.
      This results in the rows in the ``departments`` table having ``primary_employee_id`` set in the ``INSERT`` statement. The consequence of this is that the ``department_id`` on ``employees`` must be set late with an ``UPDATE`` statement.
    short_description: Not Null Columns Switched
    config:
      - not-null-columns:
        - {table: departments, column: primary_employee_id}
      - subject:
        - tables:
          - {table: departments}
        - relations:
          - {table: employees, column: department_id}
    expected_statements:
     - INSERT INTO employees (id, name, department_id) VALUES(1, 'John', NULL);
     - INSERT INTO employees (id, name, department_id) VALUES(2, 'Jane', NULL);
     - INSERT INTO departments (id, name, primary_employee_id) VALUES(1, 'Managers', 1);
     - INSERT INTO departments (id, name, primary_employee_id) VALUES(2, 'Engineers', NULL);
     - UPDATE employees SET department_id=1 WHERE id=1;
     - UPDATE employees SET department_id=2 WHERE id=2;
