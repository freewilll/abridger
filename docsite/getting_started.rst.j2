Getting Started
===============

Installation
------------
The code is hosted on `GitHub <https://github.com/willangenent/abridger>`_. No python package has released, so you will need to run python's pip installer.

If you donâ€™t have pip installed in your version of Python, install pip:

::

    $ sudo easy_install pip

Root installation
++++++++++++++++++

Install from github
::

    $ git clone https://github.com/willangenent/abridger
    $ cd abridger
    $ sudo python setup.py install


Or alternatively, you can do it in one step:
::

    $ sudo pip install git+https://github.com/willangenent/abridger



If you wish to use postgresql, install the psycopg2 package:

::

    $ sudo pip install psycopg2

Non-root installation
+++++++++++++++++++++

If you would rather not install it as root, you can use virtualenv to install a local copy

::

    $ virtualenv venv
    $ source venv/bin/activate
    $ pip install git+https://github.com/willangenent/abridger

    If you want to use postgresql
    $ pip install psycopg2

Quick start
-----------
In the following example, a test sqlite3 database will be created with some tables and some data. An extraction is shown using all relations as a default.

Create a test database
++++++++++++++++++++++
Create a file called ``{{ input_sql_path }}`` and put the following in it:
::
{% for line in schema %}
  {{ line -}}
{% endfor %}

Load ``{{ input_sql_path }}`` into an sqlite3 database called ``{{ sqlite_db_path }}``
::

  $ sqlite3 {{sqlite_db_path}} < {{ input_sql_path }}

The contents of the test database
+++++++++++++++++++++++++++++++++
::

  $ {{ contents_cmdline }}
{% for line in sqlite_db_contents %}
  {{ line -}}
{% endfor %}

Create an extraction config file
++++++++++++++++++++++++++++++++
In this example, we'll fetch the ``Research`` department, which will also fetch all employees in it.
Create a file called ``{{ config_path }}`` and put the following in it:
::

{% for line in config %}
  {{ line -}}
{% endfor %}

Run abridger
+++++++++++++
::

  $ {{ abridge_db_cmdline }}
{% for line in abridge_db_output %}
  {{ line -}}
{% endfor %}

Results
+++++++
::

  $ cat {{ output_sql_path }}
{% for line in sql_output %}
  {{ line -}}
{% endfor %}

Running abridger
----------------
Usage: ``abridge-db [-h] [-u URL] [-f FILE] [-e] [-q] [-v] CONFIG_PATH SRC_URL``

positional arguments:

===========  ==============================
CONFIG_PATH  path to extraction config file
SRC_URL      source database url
===========  ==============================

optional arguments:

  -h, --help     show this help message and exit
  -u URL         destination database url
  -f FILE        destination database file. Use - for stdout
  -e, --explain  explain where rows are coming from
  -q, --quiet    Don't output anything
  -v, --verbose  Verbose output

Unless ``-e`` is being used, exactly one of ``-f`` and ``-u`` must be specified.
Use ``-f -`` to output the SQL results to stdout.

Note that using ``-e`` is very inefficient since the extractor will do one
query for each row.


Examples
++++++++

Extract data from a postgresql database and add it to another
::

  abridge-db config.yaml postgresql://user@localhost/test -u postgresql://user@localhost/abridged_test

Extract data from a postgresql database and write an sql file
::

  abridge-db config.yaml postgresql://user@localhost/test -f test-postgresql.sql

Extract data from a sqlite3 database and output SQL to stdout
::

  abridge-db config.yaml sqlite:///test-db.sqlite3 -q -f -
